package tools;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

action code {:
    private int tabs_counter=0;

:}

parser code {:    

    @Override
    public void syntax_error(Symbol sy) {
        token t=(token)sy.value;
        done_parsing();
        report_error("Error sintáctico cerca de \""+ t.getCadena()+"\" ["+t.getFila()+"]" ,null);        
    }

:}

terminal token CLASE, NOMCLASE, PROPIEDADES, METODOS, TAB;
terminal token BOLEANO, CADENA, DECIMAL, NUMERO, AND, DESDE,DEVOLVER;
terminal token ENTONCES, ESCRIBIR, EXTIENDE, FALSO, HACER, INCREMENTAR;
terminal token LEER, MIENTRAS, NULO, SINO, SI, RETORNAR, OR, VERDADERO;
terminal token VARIABLE, MMAS, MMENOS, SUMA, RESTA, MULTIPLICACION, MODULO;
terminal token IIGUAL, IGUAL, DIAGONAL, MAYORQUE, MENORQUE, DIFERENCIA, OPCION;
terminal token PCOMA, PUNTO, PA, PC, COMA, CA, CC, CADENAS, ERROR, FNLINEA, INDENT;
terminal token ENTERO;

non terminal clase, tabs_list, prop, ini, iniS, iniB, cadenas;
non terminal tipoN, binario;
non terminal tip, com, var_sim, var_rec, rec,var;
non terminal tab_prop;

start with tab_prop;

tab_prop ::= tabs_list {:
                if(tabs_counter!=2){
                    token t=(token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
                    done_parsing();
                    report_error("Error sintáctico cerca de \""+ t.getCadena()+"\" ["+t.getFila()+"]" ,null);        
                }                
            :} var_sim;

/*declaracion de variables */
var_sim ::= ENTERO:e
        VARIABLE:v 
        PCOMA:pc {:
            System.out.println(e.getCadena());
            System.out.println(v.getCadena());
            System.out.println(pc.getCadena());
            tabs_counter=0;
            :} tab_prop
        | ENTERO:e VARIABLE:v {:
            System.out.println(e.getCadena());
            System.out.println(v.getCadena());
        :}com PCOMA:pc {:                        
            System.out.println(pc.getCadena());
            tabs_counter=0;
        :} tab_prop
        | ENTERO:e
        VARIABLE:v
        PCOMA:pc {:
            System.out.println(e.getCadena());
            System.out.println(v.getCadena());
            System.out.println(pc.getCadena());
            tabs_counter=0;
            :} 
            
            ;


com ::= IGUAL:i NUMERO:n COMA:c VARIABLE:v {:
            System.out.println(i.getCadena());
            System.out.println(n.getCadena());
            System.out.println(c.getCadena());
            System.out.println(v.getCadena());
        :}com
        | COMA:c VARIABLE:v {:
            System.out.println(c.getCadena());
            System.out.println(v.getCadena());
        :} com
        | IGUAL:i NUMERO:n COMA:c VARIABLE:v {:
            System.out.println(i.getCadena());
            System.out.println(n.getCadena());
            System.out.println(c.getCadena());
            System.out.println(v.getCadena());
        :}
        | IGUAL:i NUMERO:n {:
            System.out.println(i.getCadena());
            System.out.println(n.getCadena());:}
        |COMA:c VARIABLE:v {:
            System.out.println(c.getCadena());
            System.out.println(v.getCadena());:}
        ;

tabs_list ::= TAB {:
                    tabs_counter++; 
                :} tabs_list 
            | TAB {:
                     tabs_counter++; 
            :};