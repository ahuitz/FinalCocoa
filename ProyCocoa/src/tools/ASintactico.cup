package tools;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

action code {:
    private int tabs_counter=0;

:}

parser code {:    

    @Override
    public void syntax_error(Symbol sy) {
        token t=(token)sy.value;
        done_parsing();
        report_error("Error sintáctico cerca de \""+ t.getCadena()+"\" ["+t.getFila()+"]" ,null);        
    }

:}

terminal token CLASE, NOMCLASE, PROPIEDADES, METODOS, TAB;
terminal token BOLEANO, CADENA, DECIMAL, NUMERO, AND, DESDE,DEVOLVER;
terminal token ENTONCES, ESCRIBIR, EXTIENDE, FALSO, HACER, INCREMENTAR;
terminal token LEER, MIENTRAS, NULO, SINO, SI, RETORNAR, OR, VERDADERO;
terminal token VARIABLE, MMAS, MMENOS, SUMA, RESTA, MULTIPLICACION, MODULO;
terminal token IIGUAL, IGUAL, DIAGONAL, MAYORQUE, MENORQUE, DIFERENCIA, OPCION;
terminal token PCOMA, PUNTO, PA, PC, COMA, CA, CC, CADENAS, ERROR, FNLINEA, INDENT;
terminal token ENTERO, FLOT;

non terminal tabs_list;
non terminal tipoN;
non terminal com, var_sim;
non terminal tab_prop;
non terminal var_cad, comS, bolCad, tipoS, new_prop, comS2;

start with tab_prop;

tab_prop ::= tabs_list {:
                if(tabs_counter!=2){
                    token t=(token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
                    done_parsing();
                    report_error("Error sintáctico cerca de \""+ t.getCadena()+"\" ["+t.getFila()+"]" ,null);        
                }                
            :} new_prop;

new_prop ::= var_cad | var_sim;

/*declaracion de variables */
var_sim ::= tipoN:e
        VARIABLE:v 
        PCOMA:pc {:
            //System.out.println(e.getCadena());
            System.out.println(v.getCadena());
            System.out.println(pc.getCadena());
            tabs_counter=0;
            :} tab_prop
        | tipoN:e VARIABLE:v {:
            //System.out.println(e.getCadena());
            System.out.println(v.getCadena());
        :}com PCOMA:pc {:                        
            System.out.println(pc.getCadena());
            tabs_counter=0;
        :} tab_prop
        | tipoN:e
        VARIABLE:v
        PCOMA:pc {:
            //System.out.println(e.getCadena());
            System.out.println(v.getCadena());
            System.out.println(pc.getCadena());
            tabs_counter=0;
            :}
        ;

tipoN ::= ENTERO:e {:
            System.out.println(e.getCadena());
        :} | DECIMAL:d {:
            System.out.println(d.getCadena());
        :};

com ::= IGUAL:i NUMERO:n COMA:c VARIABLE:v {:
            System.out.println(i.getCadena());
            System.out.println(n.getCadena());
            System.out.println(c.getCadena());
            System.out.println(v.getCadena());
        :}com
        | COMA:c VARIABLE:v {:
            System.out.println(c.getCadena());
            System.out.println(v.getCadena());
        :} com
        | IGUAL:i NUMERO:n COMA:c VARIABLE:v {:
            System.out.println(i.getCadena());
            System.out.println(n.getCadena());
            System.out.println(c.getCadena());
            System.out.println(v.getCadena());
        :}
        | IGUAL:i NUMERO:n {:
            System.out.println(i.getCadena());
            System.out.println(n.getCadena());:}
        | COMA:c VARIABLE:v {:
            System.out.println(c.getCadena());
            System.out.println(v.getCadena());:}
        ;

tabs_list ::= TAB {:
                    tabs_counter++; 
                :} tabs_list 
            | TAB {:
                     tabs_counter++; 
            :};

var_cad ::= tipoS:e
        VARIABLE:v 
        PCOMA:pc {:
            //System.out.println(e.getCadena());
            System.out.println(v.getCadena());
            System.out.println(pc.getCadena());
            tabs_counter=0;
            :} tab_prop
        | tipoS:e VARIABLE:v {:
            //System.out.println(e.getCadena());
            System.out.println(v.getCadena());
        :}comS PCOMA:pc {:                        
            System.out.println(pc.getCadena());
            tabs_counter=0;
        :} tab_prop
        | tipoS:e
        VARIABLE:v
        PCOMA:pc {:
            //System.out.println(e.getCadena());
            System.out.println(v.getCadena());
            System.out.println(pc.getCadena());
            tabs_counter=0;
            :}
        ;

tipoS ::= CADENA:e {:
            System.out.println(e.getCadena());
        :} | BOLEANO:d {:
            System.out.println(d.getCadena());
        :};

comS ::= IGUAL:i {:
                System.out.println(i.getCadena());
            :} bolCad COMA:c VARIABLE:v {:            
            //System.out.println(n.getCadena());
            System.out.println(c.getCadena());
            System.out.println(v.getCadena());
        :}comS
        | COMA:c VARIABLE:v {:
            System.out.println(c.getCadena());
            System.out.println(v.getCadena());
        :} comS
        | COMA:c VARIABLE:v {:
            System.out.println(c.getCadena());
            System.out.println(v.getCadena());
        :}
        ;

bolCad ::= CADENAS:c {:
            System.out.println(c.getCadena());
        :}
        | VERDADERO:v {:
            System.out.println(v.getCadena());
        :}| FALSO:f {:
            System.out.println(f.getCadena());
            :}
        | NULO:n {:
            System.out.println(n.getCadena());
        :};