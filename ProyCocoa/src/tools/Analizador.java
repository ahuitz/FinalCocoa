
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package tools;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\045\002\000\002\046" +
    "\002\000\002\017\011\000\002\047\002\000\002\026\006" +
    "\000\002\050\002\000\002\025\006\000\002\051\002\000" +
    "\002\024\005\000\002\052\002\000\002\053\002\000\002" +
    "\020\013\000\002\054\002\000\002\020\011\000\002\020" +
    "\006\000\002\055\002\000\002\021\007\000\002\021\004" +
    "\000\002\023\003\000\002\023\003\000\002\056\002\000" +
    "\002\006\005\000\002\013\003\000\002\013\003\000\002" +
    "\057\002\000\002\005\007\000\002\060\002\000\002\061" +
    "\002\000\002\005\011\000\002\005\005\000\002\003\003" +
    "\000\002\003\003\000\002\062\002\000\002\004\010\000" +
    "\002\063\002\000\002\004\006\000\002\004\006\000\002" +
    "\004\004\000\002\004\004\000\002\064\002\000\002\002" +
    "\005\000\002\002\003\000\002\065\002\000\002\007\007" +
    "\000\002\066\002\000\002\067\002\000\002\007\011\000" +
    "\002\007\005\000\002\012\003\000\002\012\003\000\002" +
    "\070\002\000\002\071\002\000\002\010\011\000\002\072" +
    "\002\000\002\010\006\000\002\010\004\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\073\002\000\002\027\007\000\002\027\005\000\002" +
    "\027\007\000\002\074\002\000\002\027\011\000\002\027" +
    "\005\000\002\075\002\000\002\027\007\000\002\076\002" +
    "\000\002\030\007\000\002\030\005\000\002\077\002\000" +
    "\002\032\006\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\040\003\000\002\040\003\000\002\100" +
    "\002\000\002\101\002\000\002\036\012\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\033\005\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\102\002\000\002\103\002" +
    "\000\002\104\002\000\002\043\015\000\002\042\005\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\105\002\000\002\106\002\000\002\044\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\004\024\004\001\002\000\010\017\uff9a\021" +
    "\uff9a\026\uff9a\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\010\017\014\021\013\026\010\001" +
    "\002\000\004\036\054\001\002\000\004\027\uffae\001\002" +
    "\000\004\027\uffac\001\002\000\006\036\040\063\037\001" +
    "\002\000\010\014\uffb8\036\uffb8\063\uffb8\001\002\000\004" +
    "\027\uffad\001\002\000\004\027\017\001\002\000\004\036" +
    "\uff99\001\002\000\004\036\022\001\002\000\004\054\030" +
    "\001\002\000\010\046\024\050\025\051\026\001\002\000" +
    "\004\014\027\001\002\000\004\014\uff9d\001\002\000\004" +
    "\014\uff9b\001\002\000\004\014\uff9c\001\002\000\004\054" +
    "\uff9e\001\002\000\004\002\uff98\001\002\000\010\014\032" +
    "\036\035\063\033\001\002\000\004\054\uffb6\001\002\000" +
    "\004\054\uffb5\001\002\000\004\054\036\001\002\000\004" +
    "\054\uffb4\001\002\000\004\027\uffb7\001\002\000\006\054" +
    "\045\060\044\001\002\000\004\054\041\001\002\000\006" +
    "\021\uffbd\027\uffbe\001\002\000\004\021\013\001\002\000" +
    "\004\027\uffbc\001\002\000\004\036\050\001\002\000\006" +
    "\021\uffc4\027\uffc2\001\002\000\004\021\013\001\002\000" +
    "\004\027\uffc3\001\002\000\004\054\051\001\002\000\006" +
    "\021\uffc0\027\uffc1\001\002\000\004\021\013\001\002\000" +
    "\004\027\uffbf\001\002\000\004\054\055\001\002\000\006" +
    "\026\uffbb\027\uffb9\001\002\000\004\026\010\001\002\000" +
    "\004\027\uffba\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\004\044\004\001\001\000\004\105\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\027\010" +
    "\030\014\032\011\037\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\077\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\106\017\001\001\000\004\042\020\001\001\000\002" +
    "\001\001\000\004\041\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\075\041\001\001\000\004\027\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\045\001" +
    "\001\000\004\027\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\051\001\001\000\004\027\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\055" +
    "\001\001\000\004\030\056\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


    

    @Override
    public void syntax_error(Symbol sy) {
        token t=(token)sy.value;
        done_parsing();
        report_error("Error sint√°ctico cerca de \""+ t.getCadena()+"\" ["+t.getFila()+"]" ,null);        
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador$actions {


    private int tabs_counter=0;


  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action_part00000000(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= haceer EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token n = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(c.getCadena());
            System.out.println(n.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token n = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;

                System.out.println("SEGMENTO DE METODOS");
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // clase ::= CLASE NOMCLASE NT$0 frag_prop METODOS NT$1 frag_met 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		token n = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("clase",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$2 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token p = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

                if(tabs_counter!=1){
                    token t=(token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
                    done_parsing();
                    report_error("Error sint√°ctico cerca de \""+ t.getCadena()+"\" ["+t.getFila()+"]" ,null);        
                }
                System.out.println(p.getCadena());
                tabs_counter=0;
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$2",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // frag_prop ::= tabs_list PROPIEDADES NT$2 tab_prop 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token p = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("frag_prop",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$3 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

                if(tabs_counter!=1){
                    token t=(token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
                    done_parsing();
                    report_error("Error sint√°ctico cerca de \""+ t.getCadena()+"\" ["+t.getFila()+"]" ,null);        
                }
                System.out.println(m.getCadena());
                tabs_counter=0;
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$3",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // frag_met ::= tabs_list METODOS NT$3 metod_tab 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("frag_met",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$4 ::= 
            {
              Object RESULT =null;

                if(tabs_counter!=2){
                    token t=(token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
                    done_parsing();
                    report_error("Error sint√°ctico cerca de \""+ t.getCadena()+"\" ["+t.getFila()+"]" ,null);        
                }                
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$4",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // metod_tab ::= tabs_list NT$4 metod 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("metod_tab",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$5 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token pa = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(v.getCadena());
            System.out.println(pa.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$5",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token pa = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token pc = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(pc.getCadena());
            tabs_counter=0;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$6",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // metod ::= varTip VARIABLE PA NT$5 param PC NT$6 contMet metod_tab 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		token pa = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token pc = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("metod",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$7 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token pa = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token pc = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(v.getCadena());
            System.out.println(pa.getCadena());
            System.out.println(pc.getCadena());
            tabs_counter=0;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$7",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // metod ::= varTip VARIABLE PA PC NT$7 contMet metod_tab 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		token pa = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token pc = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("metod",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // metod ::= varTip VARIABLE PA PC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token pa = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token pc = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(v.getCadena());
            System.out.println(pa.getCadena());
            System.out.println(pc.getCadena());            
            tabs_counter=0;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("metod",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$8 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(v.getCadena());
            System.out.println(c.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$8",43, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param ::= varTip VARIABLE COMA NT$8 param 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("param",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param ::= varTip VARIABLE 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(v.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("param",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varTip ::= tipoN 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("varTip",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // varTip ::= tipoS 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("varTip",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$9 ::= 
            {
              Object RESULT =null;

                if(tabs_counter!=2){
                    token t=(token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
                    done_parsing();
                    report_error("Error sint√°ctico cerca de \""+ t.getCadena()+"\" ["+t.getFila()+"]" ,null);        
                }                
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$9",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tab_prop ::= tabs_list NT$9 new_prop 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tab_prop",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // new_prop ::= var_cad 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("new_prop",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // new_prop ::= var_sim 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("new_prop",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$10 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token pc = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            //System.out.println(e.getCadena());
            System.out.println(v.getCadena());
            System.out.println(pc.getCadena());
            tabs_counter=0;
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$10",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_sim ::= tipoN VARIABLE PCOMA NT$10 tab_prop 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token pc = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("var_sim",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$11 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            //System.out.println(e.getCadena());
            System.out.println(v.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$11",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token pc = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
                        
            System.out.println(pc.getCadena());
            tabs_counter=0;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$12",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_sim ::= tipoN VARIABLE NT$11 com PCOMA NT$12 tab_prop 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token pc = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("var_sim",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_sim ::= tipoN VARIABLE PCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token pc = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            //System.out.println(e.getCadena());
            System.out.println(v.getCadena());
            System.out.println(pc.getCadena());
            tabs_counter=0;
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("var_sim",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipoN ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(e.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipoN",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipoN ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token d = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(d.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipoN",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$13 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token i = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token n = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(i.getCadena());
            System.out.println(n.getCadena());
            System.out.println(c.getCadena());
            System.out.println(v.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$13",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // com ::= IGUAL NUMERO COMA VARIABLE NT$13 com 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		token i = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		token n = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("com",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$14 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(c.getCadena());
            System.out.println(v.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$14",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // com ::= COMA VARIABLE NT$14 com 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("com",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // com ::= IGUAL NUMERO COMA VARIABLE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token i = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token n = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(i.getCadena());
            System.out.println(n.getCadena());
            System.out.println(c.getCadena());
            System.out.println(v.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("com",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // com ::= IGUAL NUMERO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token i = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token n = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(i.getCadena());
            System.out.println(n.getCadena());
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("com",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // com ::= COMA VARIABLE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(c.getCadena());
            System.out.println(v.getCadena());
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("com",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$15 ::= 
            {
              Object RESULT =null;

                    tabs_counter++; 
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$15",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tabs_list ::= TAB NT$15 tabs_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tabs_list",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tabs_list ::= TAB 
            {
              Object RESULT =null;
		
                     tabs_counter++; 
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tabs_list",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$16 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token pc = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            //System.out.println(e.getCadena());
            System.out.println(v.getCadena());
            System.out.println(pc.getCadena());
            tabs_counter=0;
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$16",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var_cad ::= tipoS VARIABLE PCOMA NT$16 tab_prop 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token pc = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("var_cad",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$17 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            //System.out.println(e.getCadena());
            System.out.println(v.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$17",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token pc = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
                        
            System.out.println(pc.getCadena());
            tabs_counter=0;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$18",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // var_cad ::= tipoS VARIABLE NT$17 comS PCOMA NT$18 tab_prop 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token pc = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("var_cad",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // var_cad ::= tipoS VARIABLE PCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token pc = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            //System.out.println(e.getCadena());
            System.out.println(v.getCadena());
            System.out.println(pc.getCadena());
            tabs_counter=0;
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("var_cad",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoS ::= CADENA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(e.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipoS",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoS ::= BOLEANO 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token d = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(d.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipoS",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$19 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token i = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

                System.out.println(i.getCadena());
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$19",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		token i = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
            
            //System.out.println(n.getCadena());
            System.out.println(c.getCadena());
            System.out.println(v.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$20",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // comS ::= IGUAL NT$19 bolCad COMA VARIABLE NT$20 comS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		token i = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("comS",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$21 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(c.getCadena());
            System.out.println(v.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$21",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comS ::= COMA VARIABLE NT$21 comS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("comS",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comS ::= COMA VARIABLE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(c.getCadena());
            System.out.println(v.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("comS",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bolCad ::= CADENAS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(c.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("bolCad",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bolCad ::= VERDADERO 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(v.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("bolCad",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bolCad ::= FALSO 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(f.getCadena());
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("bolCad",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bolCad ::= NULO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token n = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(n.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("bolCad",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$22 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token p = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(e.getCadena());
            System.out.println(c.getCadena());
            System.out.println(p.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$22",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // escrib ::= ESCRIBIR CADENAS PCOMA NT$22 escrib 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token p = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("escrib",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // escrib ::= ESCRIBIR CADENAS PCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token p = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(e.getCadena());
            System.out.println(c.getCadena());
            System.out.println(p.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("escrib",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // escrib ::= ESCRIBIR CADENAS COMA VARIABLE PCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int cmleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token cm = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token p = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(e.getCadena());
            System.out.println(c.getCadena());
            System.out.println(cm.getCadena());
            System.out.println(v.getCadena());
            System.out.println(p.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("escrib",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$23 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int cmleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token cm = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token p = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(e.getCadena());
            System.out.println(c.getCadena());
            System.out.println(cm.getCadena());
            System.out.println(v.getCadena());
            System.out.println(p.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$23",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // escrib ::= ESCRIBIR CADENAS COMA VARIABLE PCOMA NT$23 escrib 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int cmleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		token cm = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token p = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("escrib",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // escrib ::= ESCRIBIR VARIABLE PCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token p = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(e.getCadena());
            System.out.println(v.getCadena());
            System.out.println(p.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("escrib",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$24 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token p = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(e.getCadena());
            System.out.println(v.getCadena());
            System.out.println(p.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$24",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // escrib ::= ESCRIBIR VARIABLE PCOMA NT$24 escrib 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token p = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("escrib",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$25 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token l = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token p = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(l.getCadena());
            System.out.println(v.getCadena());
            System.out.println(p.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$25",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lee ::= LEER VARIABLE PCOMA NT$25 lee 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		token l = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token p = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lee",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // lee ::= LEER VARIABLE PCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token l = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token p = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(l.getCadena());
            System.out.println(v.getCadena());
            System.out.println(p.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lee",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$26 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token d = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(d.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$26",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // devolv ::= DEVOLVER NT$26 val PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token d = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token pc = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(pc.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("devolv",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // val ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token n = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(n.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("val",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // val ::= CADENAS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(c.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("val",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // val ::= VARIABLE 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(v.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("val",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // contMet ::= ssi 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("contMet",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // contMet ::= conten 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("contMet",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$27 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token s = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(s.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$27",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token s = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(e.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$28",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ssi ::= SI NT$27 condic ENTONCES NT$28 conten SINO conten 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).right;
		token s = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		token e = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ssi",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // conten ::= escrib 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("conten",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // conten ::= lee 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("conten",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // conten ::= devolv 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("conten",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // condic ::= cond1 op cond1 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condic",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cond1 ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token n = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(n.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cond1",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cond1 ::= VARIABLE 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(v.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cond1",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cond1 ::= CADENAS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(c.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cond1",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // op ::= MAYORQUE 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token ma = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(ma.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // op ::= MENORQUE 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token me = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(me.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // op ::= IIGUAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token i = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(i.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // op ::= DIFERENCIA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token d = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(d.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // op ::= MODULO 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(m.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$29 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token d = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(d.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$29",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token d = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(m.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$30",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$31 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).right;
		token d = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token i = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		token n = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token h = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(i.getCadena());
            System.out.println(n.getCadena());
            System.out.println(h.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$31",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // desd ::= DESDE NT$29 inFor MIENTRAS NT$30 inFor INCREMENTAR NUMERO HACER NT$31 conten 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)).right;
		token d = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		token i = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token n = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token h = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("desd",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // inFor ::= VARIABLE opFor NUMERO 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		token v = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token n = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(v.getCadena());            
            System.out.println(n.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("inFor",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // opFor ::= IGUAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token i = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(i.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("opFor",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // opFor ::= MENORQUE 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token ma = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(ma.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("opFor",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // opFor ::= MAYORQUE 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token me = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(me.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("opFor",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$32 ::= 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token h = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(h.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$32",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$33 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token h = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            System.out.println(m.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$33",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // haceer ::= HACER NT$32 conten MIENTRAS NT$33 inFor PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		token h = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		token p = (token)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            System.out.println(p.getCadena());
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("haceer",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
              return CUP$Analizador$do_action_part00000000(
                               CUP$Analizador$act_num,
                               CUP$Analizador$parser,
                               CUP$Analizador$stack,
                               CUP$Analizador$top);
    }
}

}
